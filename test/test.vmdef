
scope interp {
    class reg: uint8_t {}
    class num: int64_t {}

    op halt() {}
    op print(reg in) {}
    op mov(reg lhs, num rhs) {}
    op add(reg lhs, reg rhs) {}
    op add(reg out, reg lhs, reg rhs) {}
    
    interp void run(): c {
        enter {
            size_t regs[16];
        }

        op halt() {
            return;
        }

        op print(reg in) {
            printf("r%zu = %zu\n", (size_t) in, regs[in]);
        }

        op mov(reg out, num rhs) {
            regs[out] = rhs;
        }

        op add(reg lhs, reg rhs) {
            regs[lhs] += regs[rhs];
        }

        op add(reg out, reg lhs, reg rhs) {
            regs[out] = regs[lhs] + regs[rhs];
        }
    }

    syntax asm {
        parse reg {
            if ($parse.str[0] != 'r') {
                goto fail;
            }
            int n;
            if (sscanf(&$parse.str[1], "%i", &n) == 0) {
                goto fail;
            }
            $parse.out = ($class.reg) n;
        }
        
        parse num {
            if (sscanf($parse.str, "%" SCNi64, &$parse.out) == 0) {
                goto fail;
            }
        }
    }
}
